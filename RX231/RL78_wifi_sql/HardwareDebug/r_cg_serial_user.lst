   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.global	_command
  28                             	.bss
  31                             	_command:
  32 0000 00 00 00 00 00 00 00 00 		.zero	100
  32      00 00 00 00 00 00 00 00 
  32      00 00 00 00 00 00 00 00 
  32      00 00 00 00 00 00 00 00 
  32      00 00 00 00 00 00 00 00 
  33                             		.global	_i
  34                             		.balign 2
  37                             	_i:
  38 0064 00 00                   		.zero	2
  39                             		.global	_tx_flag
  40                             		.balign 2
  43                             	_tx_flag:
  44 0066 00 00                   		.zero	2
  45                             	.text
  46                             		.global	_r_uart0_interrupt_receive
  48                             	_r_uart0_interrupt_receive:
  49                             	.LFB0:
  50                             		.file 1 "../src/r_cg_serial_user.c"
   1:../src/r_cg_serial_user.c **** /**************************************************************************************************
   2:../src/r_cg_serial_user.c **** * DISCLAIMER
   3:../src/r_cg_serial_user.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/r_cg_serial_user.c **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
   5:../src/r_cg_serial_user.c **** * applicable laws, including copyright laws. 
   6:../src/r_cg_serial_user.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIESREGARDING THIS SOFTWARE, WHETHER
   7:../src/r_cg_serial_user.c **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
   8:../src/r_cg_serial_user.c **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
   9:../src/r_cg_serial_user.c **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  10:../src/r_cg_serial_user.c **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  11:../src/r_cg_serial_user.c **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/r_cg_serial_user.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/r_cg_serial_user.c **** * of this software. By using this software, you agree to the additional terms and conditions found 
  14:../src/r_cg_serial_user.c **** * following link:
  15:../src/r_cg_serial_user.c **** * http://www.renesas.com/disclaimer
  16:../src/r_cg_serial_user.c **** *
  17:../src/r_cg_serial_user.c **** * Copyright (C) 2011, 2016 Renesas Electronics Corporation. All rights reserved.
  18:../src/r_cg_serial_user.c **** ***************************************************************************************************
  19:../src/r_cg_serial_user.c **** 
  20:../src/r_cg_serial_user.c **** /**************************************************************************************************
  21:../src/r_cg_serial_user.c **** * File Name    : r_cg_serial_user.c
  22:../src/r_cg_serial_user.c **** * Version      : CodeGenerator for RL78/G12 V2.03.04.01 [11 Nov 2016]
  23:../src/r_cg_serial_user.c **** * Device(s)    : R5F1026A
  24:../src/r_cg_serial_user.c **** * Tool-Chain   : GCCRL78
  25:../src/r_cg_serial_user.c **** * Description  : This file implements device driver for Serial module.
  26:../src/r_cg_serial_user.c **** * Creation Date: 2018/4/10
  27:../src/r_cg_serial_user.c **** ***************************************************************************************************
  28:../src/r_cg_serial_user.c **** 
  29:../src/r_cg_serial_user.c **** /**************************************************************************************************
  30:../src/r_cg_serial_user.c **** Includes
  31:../src/r_cg_serial_user.c **** ***************************************************************************************************
  32:../src/r_cg_serial_user.c **** #include "r_cg_macrodriver.h"
  33:../src/r_cg_serial_user.c **** #include "r_cg_serial.h"
  34:../src/r_cg_serial_user.c **** /* Start user code for include. Do not edit comment generated here */
  35:../src/r_cg_serial_user.c **** /* End user code. Do not edit comment generated here */
  36:../src/r_cg_serial_user.c **** #include "r_cg_userdefine.h"
  37:../src/r_cg_serial_user.c **** 
  38:../src/r_cg_serial_user.c **** /**************************************************************************************************
  39:../src/r_cg_serial_user.c **** Global variables and functions
  40:../src/r_cg_serial_user.c **** ***************************************************************************************************
  41:../src/r_cg_serial_user.c **** extern volatile uint8_t * gp_uart0_tx_address;         /* uart0 send buffer address */
  42:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart0_tx_count;            /* uart0 send data number */
  43:../src/r_cg_serial_user.c **** extern volatile uint8_t * gp_uart0_rx_address;         /* uart0 receive buffer address */
  44:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart0_rx_count;            /* uart0 receive data number */
  45:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart0_rx_length;           /* uart0 receive data length */
  46:../src/r_cg_serial_user.c **** /* Start user code for global. Do not edit comment generated here */
  47:../src/r_cg_serial_user.c **** extern char rx[1];
  48:../src/r_cg_serial_user.c **** char command[100]={0};
  49:../src/r_cg_serial_user.c **** int i=0,tx_flag=0;
  50:../src/r_cg_serial_user.c **** /* End user code. Do not edit comment generated here */
  51:../src/r_cg_serial_user.c **** 
  52:../src/r_cg_serial_user.c **** /**************************************************************************************************
  53:../src/r_cg_serial_user.c **** * Function Name: r_uart0_interrupt_receive
  54:../src/r_cg_serial_user.c **** * Description  : This function is INTSR0 interrupt service routine.
  55:../src/r_cg_serial_user.c **** * Arguments    : None
  56:../src/r_cg_serial_user.c **** * Return Value : None
  57:../src/r_cg_serial_user.c **** ***************************************************************************************************
  58:../src/r_cg_serial_user.c **** void r_uart0_interrupt_receive(void)
  59:../src/r_cg_serial_user.c **** {
  51                             		.loc 1 59 0
  52                             		; start of function
  53                             		; push 16: ax bc de hl r8 r10 r12 r14
  54                             		; locals: 2 bytes
  55                             		; outgoing: 2 bytes
  56 0000 61 CF                   		sel	rb0
  57 0002 C1                      		push	ax
  58                             	.LCFI0:
  59 0003 C3                      		push	bc
  60                             	.LCFI1:
  61 0004 C5                      		push	de
  62                             	.LCFI2:
  63 0005 C7                      		push	hl
  64                             	.LCFI3:
  65 0006 61 DF                   		sel	rb1
  66 0008 C1                      		push	ax ; r8
  67                             	.LCFI4:
  68 0009 C3                      		push	bc ; r10
  69                             	.LCFI5:
  70 000a C5                      		push	de ; r12
  71                             	.LCFI6:
  72 000b C7                      		push	hl ; r14
  73                             	.LCFI7:
  74 000c 61 CF                   		sel	rb0
  75 000e 20 04                   		subw	sp, #4
  76                             	.LCFI8:
  60:../src/r_cg_serial_user.c ****     volatile uint8_t rx_data;
  61:../src/r_cg_serial_user.c ****     volatile uint8_t err_type;
  62:../src/r_cg_serial_user.c ****     
  63:../src/r_cg_serial_user.c ****     err_type = (uint8_t)(SSR01 & 0x0007U);
  77                             		.loc 1 63 0
  78 0010 C9 F0 02 01             		movw	r8, #258
  79 0014 AD F0                   		movw	ax, r8
  80 0016 BD F2                   		movw	r10, ax
  81 0018 FA F2                   		movw	hl, r10
  82 001a AB                      		movw	ax, [hl]
  83 001b BD F0                   		movw	r8, ax
  84 001d 5A F0 07                		and	r8, #7
  85 0020 8D F0                   		mov	a, r8
  86 0022 98 02                   		mov	[sp+2], a
  64:../src/r_cg_serial_user.c ****     SIR01 = (uint16_t)err_type;
  87                             		.loc 1 64 0
  88 0024 C9 F2 0A 01             		movw	r10, #266
  89 0028 88 02                   		mov	a, [sp+2]
  90 002a 9D F0                   		mov	r8, a
  91 002c F4 F1                   		clrb	r9
  92 002e AD F2                   		movw	ax, r10
  93 0030 BD F4                   		movw	r12, ax
  94 0032 DA F4                   		movw	bc, r12
  95 0034 AD F0                   		movw	ax, r8
  96 0036 78 00 00                		movw	[bc], ax
  65:../src/r_cg_serial_user.c **** 
  66:../src/r_cg_serial_user.c ****     if (err_type != 0U)
  97                             		.loc 1 66 0
  98 0039 88 02                   		mov	a, [sp+2]
  99 003b 9D F0                   		mov	r8, a
 100 003d D4 F0                   		cmp0	r8
 101 003f 61 F8                   		 sknz
 102 0041 EC 4F 00 00             		 br	!!.L2
  67:../src/r_cg_serial_user.c ****     {
  68:../src/r_cg_serial_user.c ****         r_uart0_callback_error(err_type);
 103                             		.loc 1 68 0
 104 0045 88 02                   		mov	a, [sp+2]
 105 0047 9D F0                   		mov	r8, a
 106 0049 98 00                   		mov	[sp], a
 107 004b FC 6F 01 00             		call	!!%code(_r_uart0_callback_error)
 108                             	.L2:
  69:../src/r_cg_serial_user.c ****     }
  70:../src/r_cg_serial_user.c ****     
  71:../src/r_cg_serial_user.c ****     rx_data = RXD0;
 109                             		.loc 1 71 0
 110 004f C9 F0 12 FF             		movw	r8, #-238
 111 0053 AD F0                   		movw	ax, r8
 112 0055 BD F2                   		movw	r10, ax
 113 0057 FA F2                   		movw	hl, r10
 114 0059 8B                      		mov	a, [hl]
 115 005a 9D F0                   		mov	r8, a
 116 005c 98 03                   		mov	[sp+3], a
  72:../src/r_cg_serial_user.c **** 
  73:../src/r_cg_serial_user.c ****     if (g_uart0_rx_length > g_uart0_rx_count)
 117                             		.loc 1 73 0
 118 005e AF 00 00                		movw	ax, !_g_uart0_rx_length
 119 0061 BD F2                   		movw	r10, ax
 120 0063 AF 00 00                		movw	ax, !_g_uart0_rx_count
 121 0066 BD F0                   		movw	r8, ax
 122 0068 AD F2                   		movw	ax, r10
 123 006a 46 F0                   		cmpw	ax, r8
 124 006c 61 E3                   		 skh
 125 006e EC BA 00 00             		 br	!!.L3
  74:../src/r_cg_serial_user.c ****     {
  75:../src/r_cg_serial_user.c ****         *gp_uart0_rx_address = rx_data;
 126                             		.loc 1 75 0
 127 0072 AF 00 00                		movw	ax, !_gp_uart0_rx_address
 128 0075 BD F0                   		movw	r8, ax
 129 0077 88 03                   		mov	a, [sp+3]
 130 0079 9D F2                   		mov	r10, a
 131 007b AD F0                   		movw	ax, r8
 132 007d BD F4                   		movw	r12, ax
 133 007f DA F4                   		movw	bc, r12
 134 0081 8D F2                   		mov	a, r10
 135 0083 48 00 00                		mov	[bc], a
  76:../src/r_cg_serial_user.c ****         gp_uart0_rx_address++;
 136                             		.loc 1 76 0
 137 0086 AF 00 00                		movw	ax, !_gp_uart0_rx_address
 138 0089 BD F0                   		movw	r8, ax
 139 008b A6 F0                   		incw	r8
 140 008d AD F0                   		movw	ax, r8
 141 008f BF 00 00                		movw	!_gp_uart0_rx_address, ax
  77:../src/r_cg_serial_user.c ****         g_uart0_rx_count++;
 142                             		.loc 1 77 0
 143 0092 AF 00 00                		movw	ax, !_g_uart0_rx_count
 144 0095 BD F0                   		movw	r8, ax
 145 0097 A6 F0                   		incw	r8
 146 0099 AD F0                   		movw	ax, r8
 147 009b BF 00 00                		movw	!_g_uart0_rx_count, ax
  78:../src/r_cg_serial_user.c **** 
  79:../src/r_cg_serial_user.c ****         if (g_uart0_rx_length == g_uart0_rx_count)
 148                             		.loc 1 79 0
 149 009e AF 00 00                		movw	ax, !_g_uart0_rx_length
 150 00a1 BD F2                   		movw	r10, ax
 151 00a3 AF 00 00                		movw	ax, !_g_uart0_rx_count
 152 00a6 BD F0                   		movw	r8, ax
 153 00a8 AD F2                   		movw	ax, r10
 154 00aa 46 F0                   		cmpw	ax, r8
 155 00ac 61 E8                   		 skz
 156 00ae EC C8 00 00             		 br	!!.L1
  80:../src/r_cg_serial_user.c ****         {
  81:../src/r_cg_serial_user.c ****             r_uart0_callback_receiveend();
 157                             		.loc 1 81 0
 158 00b2 FC 3D 01 00             		call	!!%code(_r_uart0_callback_receiveend)
 159 00b6 EC C8 00 00             		br	!!.L1
 160                             	.L3:
  82:../src/r_cg_serial_user.c ****         }
  83:../src/r_cg_serial_user.c ****     }
  84:../src/r_cg_serial_user.c ****     else
  85:../src/r_cg_serial_user.c ****     {
  86:../src/r_cg_serial_user.c ****         r_uart0_callback_softwareoverrun(rx_data);
 161                             		.loc 1 86 0
 162 00ba 88 03                   		mov	a, [sp+3]
 163 00bc 9D F0                   		mov	r8, a
 164 00be F4 F1                   		clrb	r9
 165 00c0 AD F0                   		movw	ax, r8
 166 00c2 B8 00                   		movw	[sp], ax
 167 00c4 FC 69 01 00             		call	!!%code(_r_uart0_callback_softwareoverrun)
 168                             	.L1:
  87:../src/r_cg_serial_user.c ****     }
  88:../src/r_cg_serial_user.c **** }
 169                             		.loc 1 88 0
 170 00c8 10 04                   		addw	sp, #4
 171 00ca 61 DF                   		sel	rb1
 172 00cc C6                      		pop	hl ; r14
 173 00cd C4                      		pop	de ; r12
 174 00ce C2                      		pop	bc ; r10
 175 00cf C0                      		pop	ax ; r8
 176 00d0 61 CF                   		sel	rb0
 177 00d2 C6                      		pop	hl
 178 00d3 C4                      		pop	de
 179 00d4 C2                      		pop	bc
 180 00d5 C0                      		pop	ax
 181 00d6 61 FC                   		reti
 182                             	.LFE0:
 184                             		.global	_r_uart0_interrupt_send
 186                             	_r_uart0_interrupt_send:
 187                             	.LFB1:
  89:../src/r_cg_serial_user.c **** 
  90:../src/r_cg_serial_user.c **** /**************************************************************************************************
  91:../src/r_cg_serial_user.c **** * Function Name: r_uart0_interrupt_send
  92:../src/r_cg_serial_user.c **** * Description  : This function is INTST0 interrupt service routine.
  93:../src/r_cg_serial_user.c **** * Arguments    : None
  94:../src/r_cg_serial_user.c **** * Return Value : None
  95:../src/r_cg_serial_user.c **** ***************************************************************************************************
  96:../src/r_cg_serial_user.c **** void r_uart0_interrupt_send(void)
  97:../src/r_cg_serial_user.c **** {
 188                             		.loc 1 97 0
 189                             		; start of function
 190                             		; push 16: ax bc de hl r8 r10 r12 r14
 191 00d8 61 CF                   		sel	rb0
 192 00da C1                      		push	ax
 193                             	.LCFI9:
 194 00db C3                      		push	bc
 195                             	.LCFI10:
 196 00dc C5                      		push	de
 197                             	.LCFI11:
 198 00dd C7                      		push	hl
 199                             	.LCFI12:
 200 00de 61 DF                   		sel	rb1
 201 00e0 C1                      		push	ax ; r8
 202                             	.LCFI13:
 203 00e1 C3                      		push	bc ; r10
 204                             	.LCFI14:
 205 00e2 C5                      		push	de ; r12
 206                             	.LCFI15:
 207 00e3 C7                      		push	hl ; r14
 208                             	.LCFI16:
 209 00e4 61 CF                   		sel	rb0
  98:../src/r_cg_serial_user.c ****     if (g_uart0_tx_count > 0U)
 210                             		.loc 1 98 0
 211 00e6 AF 00 00                		movw	ax, !_g_uart0_tx_count
 212 00e9 BD F0                   		movw	r8, ax
 213 00eb 44 00 00                		cmpw	ax, #0
 214 00ee 61 F8                   		 sknz
 215 00f0 EC 2B 01 00             		 br	!!.L7
  99:../src/r_cg_serial_user.c ****     {
 100:../src/r_cg_serial_user.c ****         TXD0 = *gp_uart0_tx_address;
 216                             		.loc 1 100 0
 217 00f4 C9 F2 10 FF             		movw	r10, #-240
 218 00f8 AF 00 00                		movw	ax, !_gp_uart0_tx_address
 219 00fb BD F0                   		movw	r8, ax
 220 00fd BD F4                   		movw	r12, ax
 221 00ff FA F4                   		movw	hl, r12
 222 0101 8B                      		mov	a, [hl]
 223 0102 9D F0                   		mov	r8, a
 224 0104 AD F2                   		movw	ax, r10
 225 0106 BD F4                   		movw	r12, ax
 226 0108 DA F4                   		movw	bc, r12
 227 010a 8D F0                   		mov	a, r8
 228 010c 48 00 00                		mov	[bc], a
 101:../src/r_cg_serial_user.c ****         gp_uart0_tx_address++;
 229                             		.loc 1 101 0
 230 010f AF 00 00                		movw	ax, !_gp_uart0_tx_address
 231 0112 BD F0                   		movw	r8, ax
 232 0114 A6 F0                   		incw	r8
 233 0116 AD F0                   		movw	ax, r8
 234 0118 BF 00 00                		movw	!_gp_uart0_tx_address, ax
 102:../src/r_cg_serial_user.c ****         g_uart0_tx_count--;
 235                             		.loc 1 102 0
 236 011b AF 00 00                		movw	ax, !_g_uart0_tx_count
 237 011e BD F0                   		movw	r8, ax
 238 0120 B6 F0                   		decw	r8
 239 0122 AD F0                   		movw	ax, r8
 240 0124 BF 00 00                		movw	!_g_uart0_tx_count, ax
 241 0127 EC 2F 01 00             		br	!!.L6
 242                             	.L7:
 103:../src/r_cg_serial_user.c ****     }
 104:../src/r_cg_serial_user.c ****     else
 105:../src/r_cg_serial_user.c ****     {
 106:../src/r_cg_serial_user.c ****         r_uart0_callback_sendend();
 243                             		.loc 1 106 0
 244 012b FC 6A 01 00             		call	!!%code(_r_uart0_callback_sendend)
 245                             	.L6:
 107:../src/r_cg_serial_user.c ****     }
 108:../src/r_cg_serial_user.c **** }
 246                             		.loc 1 108 0
 247 012f 61 DF                   		sel	rb1
 248 0131 C6                      		pop	hl ; r14
 249 0132 C4                      		pop	de ; r12
 250 0133 C2                      		pop	bc ; r10
 251 0134 C0                      		pop	ax ; r8
 252 0135 61 CF                   		sel	rb0
 253 0137 C6                      		pop	hl
 254 0138 C4                      		pop	de
 255 0139 C2                      		pop	bc
 256 013a C0                      		pop	ax
 257 013b 61 FC                   		reti
 258                             	.LFE1:
 261                             	_r_uart0_callback_receiveend:
 262                             	.LFB2:
 109:../src/r_cg_serial_user.c **** 
 110:../src/r_cg_serial_user.c **** /**************************************************************************************************
 111:../src/r_cg_serial_user.c **** * Function Name: r_uart0_callback_receiveend
 112:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART0 finishes reception.
 113:../src/r_cg_serial_user.c **** * Arguments    : None
 114:../src/r_cg_serial_user.c **** * Return Value : None
 115:../src/r_cg_serial_user.c **** ***************************************************************************************************
 116:../src/r_cg_serial_user.c **** static void r_uart0_callback_receiveend(void)
 117:../src/r_cg_serial_user.c **** {
 263                             		.loc 1 117 0
 264                             		; start of function
 265                             		; outgoing: 4 bytes
 266 013d 20 04                   		subw	sp, #4
 267                             	.LCFI17:
 118:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 119:../src/r_cg_serial_user.c **** 	R_UART0_Receive(rx,1);
 268                             		.loc 1 119 0
 269 013f 30 00 00                		movw	ax, #_rx
 270 0142 B8 00                   		movw	[sp], ax
 271 0144 E6                      		onew	ax
 272 0145 B8 02                   		movw	[sp+2], ax
 273 0147 FC 00 00 00             		call	!!%code(_R_UART0_Receive)
 120:../src/r_cg_serial_user.c **** 	command[i]=rx[0];
 274                             		.loc 1 120 0
 275 014b AF 00 00                		movw	ax, !_i
 276 014e BD F0                   		movw	r8, ax
 277 0150 8F 00 00                		mov	a, !_rx
 278 0153 9D F2                   		mov	r10, a
 279 0155 DA F0                   		movw	bc, r8
 280 0157 48 00 00                		mov	_command[bc], a
 121:../src/r_cg_serial_user.c **** 	i++;
 281                             		.loc 1 121 0
 282 015a AF 00 00                		movw	ax, !_i
 283 015d BD F0                   		movw	r8, ax
 284 015f A6 F0                   		incw	r8
 285 0161 AD F0                   		movw	ax, r8
 286 0163 BF 00 00                		movw	!_i, ax
 122:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 123:../src/r_cg_serial_user.c **** }
 287                             		.loc 1 123 0
 288 0166 10 04                   		addw	sp, #4
 289 0168 D7                      		ret
 290                             	.LFE2:
 293                             	_r_uart0_callback_softwareoverrun:
 294                             	.LFB3:
 124:../src/r_cg_serial_user.c **** 
 125:../src/r_cg_serial_user.c **** /**************************************************************************************************
 126:../src/r_cg_serial_user.c **** * Function Name: r_uart0_callback_softwareoverrun
 127:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART0 receives an overflow data.
 128:../src/r_cg_serial_user.c **** * Arguments    : rx_data -
 129:../src/r_cg_serial_user.c **** *                    receive data
 130:../src/r_cg_serial_user.c **** * Return Value : None
 131:../src/r_cg_serial_user.c **** ***************************************************************************************************
 132:../src/r_cg_serial_user.c **** static void r_uart0_callback_softwareoverrun(uint16_t rx_data)
 133:../src/r_cg_serial_user.c **** {
 295                             		.loc 1 133 0
 134:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 135:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 136:../src/r_cg_serial_user.c **** }
 296                             		.loc 1 136 0
 297 0169 D7                      		ret
 298                             	.LFE3:
 301                             	_r_uart0_callback_sendend:
 302                             	.LFB4:
 137:../src/r_cg_serial_user.c **** 
 138:../src/r_cg_serial_user.c **** /**************************************************************************************************
 139:../src/r_cg_serial_user.c **** * Function Name: r_uart0_callback_sendend
 140:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART0 finishes transmission.
 141:../src/r_cg_serial_user.c **** * Arguments    : None
 142:../src/r_cg_serial_user.c **** * Return Value : None
 143:../src/r_cg_serial_user.c **** ***************************************************************************************************
 144:../src/r_cg_serial_user.c **** static void r_uart0_callback_sendend(void)
 145:../src/r_cg_serial_user.c **** {
 303                             		.loc 1 145 0
 146:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 147:../src/r_cg_serial_user.c **** 	tx_flag=1;
 304                             		.loc 1 147 0
 305 016a E6                      		onew	ax
 306 016b BF 00 00                		movw	!_tx_flag, ax
 148:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 149:../src/r_cg_serial_user.c **** }
 307                             		.loc 1 149 0
 308 016e D7                      		ret
 309                             	.LFE4:
 312                             	_r_uart0_callback_error:
 313                             	.LFB5:
 150:../src/r_cg_serial_user.c **** 
 151:../src/r_cg_serial_user.c **** /**************************************************************************************************
 152:../src/r_cg_serial_user.c **** * Function Name: r_uart0_callback_error
 153:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART0 reception error occurs.
 154:../src/r_cg_serial_user.c **** * Arguments    : err_type -
 155:../src/r_cg_serial_user.c **** *                    error type value
 156:../src/r_cg_serial_user.c **** * Return Value : None
 157:../src/r_cg_serial_user.c **** ***************************************************************************************************
 158:../src/r_cg_serial_user.c **** static void r_uart0_callback_error(uint8_t err_type)
 159:../src/r_cg_serial_user.c **** {
 314                             		.loc 1 159 0
 160:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 161:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 162:../src/r_cg_serial_user.c **** }
 315                             		.loc 1 162 0
 316 016f D7                      		ret
 317                             	.LFE5:
 457                             	.Letext0:
 458                             		.file 2 "../src/r_cg_macrodriver.h"
